[workspace]
members = [
    "crates/workflow-engine-core",
    "crates/workflow-engine-mcp",
    "crates/workflow-engine-api",
    "crates/workflow-engine-nodes",
    "crates/workflow-engine-app", "crates/workflow-engine-gateway",
]
exclude = [
    "services/*",
    "mcp-servers/*",
    "examples/*",
]
resolver = "2"

[workspace.package]
version = "0.6.0"
edition = "2021"
authors = ["Brandon Redmond <bredmond1019@gmail.com>"]
license = "MIT"
description = "Production-ready AI workflow orchestration platform built in Rust, featuring event sourcing, microservices architecture, Model Context Protocol (MCP) integration, and advanced AI capabilities."
repository = "https://github.com/bredmond1019/workflow-engine-rs"
homepage = "https://github.com/bredmond1019/workflow-engine-rs"
documentation = "https://docs.rs/ai-workflow-engine"
readme = "README.md"
keywords = ["ai", "workflow", "orchestration", "mcp", "automation"]
categories = ["web-programming", "science", "api-bindings", "development-tools", "asynchronous"]

[workspace.dependencies]
# Core Rust libraries
tokio = { version = "1.36.0", features = ["full"] }
serde = { version = "1.0.219", features = ["derive"] }
serde_json = "1.0.140"
uuid = { version = "1.17.0", features = ["v4", "serde"] }
chrono = { version = "0.4.41", features = ["serde"] }
thiserror = "2.0.12"
async-trait = "0.1.77"
tracing = "0.1.40"
tracing-subscriber = { version = "0.3.18", features = ["json", "env-filter"] }

# Database features
diesel = { version = "2.2.10", features = ["postgres", "r2d2", "chrono", "uuid", "serde_json"] }

# Web framework features
actix-web = "4.11.0"
actix-cors = "0.7.1"
actix-web-actors = "4.3"
actix = "0.13.5"

# OpenAPI documentation features
utoipa = { version = "5.4", features = ["actix_extras"] }
utoipa-swagger-ui = { version = "9.0", features = ["actix-web"] }

# Monitoring features
prometheus = { version = "0.14.0", default-features = false, features = ["process"] }
lazy_static = "1.5.0"

# AWS features
aws-config = "1.1.7"
aws-sdk-bedrockruntime = "1.16.0"

# Networking and MCP features
reqwest = { version = "0.11.24", features = ["json", "stream"] }
tokio-tungstenite = "0.21.0"
tokio-stream = "0.1.14"
tokio-util = { version = "0.7", features = ["codec", "io"] }
futures-util = "0.3.28"
bytes = "1.6"

# GraphQL features
async-graphql = { version = "7.0", features = ["apollo_tracing", "apollo_persisted_queries"] }
async-graphql-axum = "7.0"

# Utility libraries
once_cell = "1.19.0"
dotenvy = "0.15.1"
regex = "1.10.0"
handlebars = "6.0.0"
base64 = "0.22.0"
unicode-segmentation = "1.10.1"
rust_decimal = { version = "1.34.3", features = ["serde-float", "std"] }
redis = { version = "0.25.0", features = ["tokio-comp", "connection-manager"] }
md5 = "0.7.0"
flate2 = "1.0"
lz4_flex = "0.11"
bincode = "1.3"
sha2 = "0.10.8"
tiktoken-rs = "0.5.9"
serde_yaml = "0.9.34"
async-stream = "0.3.5"
jsonwebtoken = "9.2.0"
rand = "0.8.5"
log = "0.4.27"
env_logger = "0.11.8"
uptime_lib = "0.3.1"
sysinfo = "0.35.2"
clap = { version = "4.0", features = ["derive"] }

# Development dependencies
mockall = "0.12.1"
tempfile = "3.8.1"
tokio-test = "0.4"
criterion = { version = "0.5", features = ["html_reports"] }
serial_test = "3.1"
wiremock = "0.6"
proptest = "1.4"
test-case = "3.3"
toml = "0.8.8"


[workspace.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
targets = ["x86_64-unknown-linux-gnu", "x86_64-pc-windows-msvc", "x86_64-apple-darwin"]

[profile.dev]
opt-level = 0
debug = true
debug-assertions = true
overflow-checks = true
lto = false
panic = 'unwind'
incremental = true
codegen-units = 256

[profile.release]
opt-level = 3
debug = false
debug-assertions = false
overflow-checks = false
lto = "thin"
panic = 'abort'
incremental = false
codegen-units = 1

[profile.test]
opt-level = 0
debug = 2
debug-assertions = true
overflow-checks = true
lto = false
panic = 'unwind'
incremental = true
codegen-units = 256

[profile.bench]
opt-level = 3
debug = false
debug-assertions = false
overflow-checks = false
lto = "thin"
panic = 'abort'
incremental = false
codegen-units = 1
