# Multi-stage build with cargo-chef for efficient caching
FROM lukemathwalker/cargo-chef:latest-rust-slim AS chef
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libpq-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Prepare recipe
FROM chef AS planner
COPY . .
RUN cargo chef prepare --recipe-path recipe.json

# Build dependencies
FROM chef AS builder
COPY --from=planner /app/recipe.json recipe.json

# Build dependencies - this layer is cached
RUN cargo chef cook --release --recipe-path recipe.json

# Copy source code and build application
COPY . .
ENV SQLX_OFFLINE=true
ENV DATABASE_URL="postgresql://postgres:postgres@localhost/dummy"

# Build the application with verbose error output
RUN cargo build --release --bin workflow-engine --verbose 2>&1 | tee build.log || \
    (echo "=== BUILD FAILED - Showing detailed errors ===" && \
     echo "Last 100 lines of build output:" && \
     tail -100 build.log && \
     echo "=== Trying to get specific error details ===" && \
     cargo check --bin workflow-engine --message-format=human 2>&1 | head -50 && \
     exit 1)

# Runtime stage - minimal image
FROM debian:bookworm-slim AS runtime

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    libssl3 \
    libpq5 \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd -m -u 1000 aiworkflow

# Copy only the binary
COPY --from=builder /app/target/release/workflow-engine /usr/local/bin/ai-workflow

# Create necessary directories
RUN mkdir -p /app/logs /app/workflows && \
    chown -R aiworkflow:aiworkflow /app

# Switch to non-root user
USER aiworkflow
WORKDIR /app

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/api/v1/health || exit 1

# Run the application
CMD ["ai-workflow"]