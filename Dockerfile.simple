# Simple Dockerfile using latest Rust version (closest to local 1.87)
FROM rust:latest AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libpq-dev \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy source code
COPY Cargo.toml Cargo.lock ./
COPY crates/ ./crates/

# Show build environment info for debugging
RUN echo "=== Docker Build Environment ===" && \
    rustc --version && \
    cargo --version && \
    echo "Target: $(rustc -vV | grep host)" && \
    echo "================================="

# Set environment variables that might be needed
ENV SQLX_OFFLINE=true
ENV DATABASE_URL="postgresql://postgres:postgres@localhost/dummy"
ENV RUST_BACKTRACE=1

# Build with more permissive error handling (warnings as warnings, not errors)
RUN cargo build --release --bin workflow-engine || \
    (echo "=== BUILD FAILED ===" && \
     echo "Checking for specific compilation errors:" && \
     cargo check --bin workflow-engine 2>&1 | tail -50 && \
     echo "=== Trying with ignored warnings ===" && \
     RUSTFLAGS="-A warnings" cargo build --release --bin workflow-engine)

# Runtime stage
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libssl3 \
    libpq5 \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd -m -u 1000 aiworkflow

# Copy the binary
COPY --from=builder /app/target/release/workflow-engine /usr/local/bin/ai-workflow

# Create directories
RUN mkdir -p /app/logs /app/workflows && \
    chown -R aiworkflow:aiworkflow /app

USER aiworkflow
WORKDIR /app

EXPOSE 8080

HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/api/v1/health || exit 1

CMD ["ai-workflow"]