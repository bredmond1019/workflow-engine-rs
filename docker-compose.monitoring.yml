version: '3.8'

services:
  # Grafana Dashboard Service
  grafana:
    image: grafana/grafana:latest
    container_name: ai-workflow-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards/ai-workflow
    networks:
      - ai-workflow-network
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped
    labels:
      - "monitoring.service=grafana"
      - "monitoring.description=Visualization and dashboards"

  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-workflow-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - ai-workflow-network
    restart: unless-stopped
    labels:
      - "monitoring.service=prometheus"
      - "monitoring.description=Metrics collection and storage"

  # Loki Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: ai-workflow-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki.yml
    volumes:
      - ./monitoring/loki:/etc/loki
      - loki_data:/tmp/loki
    networks:
      - ai-workflow-network
    restart: unless-stopped
    labels:
      - "monitoring.service=loki"
      - "monitoring.description=Log aggregation and storage"

  # Promtail Log Collection (for file-based logs)
  promtail:
    image: grafana/promtail:latest
    container_name: ai-workflow-promtail
    volumes:
      - ./monitoring/promtail:/etc/promtail
      - /var/log:/var/log:ro
      - ./logs:/app/logs:ro
    command: -config.file=/etc/promtail/promtail.yml
    networks:
      - ai-workflow-network
    depends_on:
      - loki
    restart: unless-stopped
    labels:
      - "monitoring.service=promtail"
      - "monitoring.description=Log collection agent"

  # Jaeger Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ai-workflow-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "6831:6831/udp"  # UDP collector
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    networks:
      - ai-workflow-network
    restart: unless-stopped
    labels:
      - "monitoring.service=jaeger"
      - "monitoring.description=Distributed tracing"

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: ai-workflow-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - ai-workflow-network
    restart: unless-stopped
    labels:
      - "monitoring.service=node-exporter"
      - "monitoring.description=System metrics collection"

  # AlertManager for alerting
  alertmanager:
    image: prom/alertmanager:latest
    container_name: ai-workflow-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - ai-workflow-network
    restart: unless-stopped
    labels:
      - "monitoring.service=alertmanager"
      - "monitoring.description=Alert management and routing"

volumes:
  grafana_data:
    driver: local
    labels:
      - "monitoring.volume=grafana"
  prometheus_data:
    driver: local
    labels:
      - "monitoring.volume=prometheus"
  loki_data:
    driver: local
    labels:
      - "monitoring.volume=loki"
  alertmanager_data:
    driver: local
    labels:
      - "monitoring.volume=alertmanager"

networks:
  ai-workflow-network:
    driver: bridge
    labels:
      - "monitoring.network=main"