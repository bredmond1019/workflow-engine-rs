version: '3.8'

# Production overrides for AI Workflow Engine
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  # PostgreSQL - Production settings
  postgres:
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      # Production tuning
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Main application - Production settings
  ai-workflow-system:
    restart: always
    environment:
      RUST_LOG: ${RUST_LOG:-warn,ai_workflow=info}
      RUST_BACKTRACE: 0
      # Production database pool settings
      DATABASE_POOL_SIZE: 20
      DATABASE_TIMEOUT: 30
      # Security
      SECURE_COOKIES: "true"
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-}
      # Performance
      TOKIO_WORKER_THREADS: ${TOKIO_WORKER_THREADS:-8}
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Content Processing - Production settings
  content-processing:
    restart: always
    environment:
      RUST_LOG: ${RUST_LOG:-warn,content_processing=info}
      WORKER_THREADS: ${WORKER_THREADS:-8}
      QUEUE_SIZE: ${QUEUE_SIZE:-1000}
      # Production limits
      MAX_CONTENT_SIZE: ${MAX_CONTENT_SIZE:-52428800}  # 50MB
      REQUEST_TIMEOUT: ${REQUEST_TIMEOUT:-300}  # 5 minutes
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Knowledge Graph - Production settings
  knowledge-graph:
    restart: always
    environment:
      RUST_LOG: ${RUST_LOG:-warn,knowledge_graph=info}
      # Production cache settings
      CACHE_TTL: ${CACHE_TTL:-3600}
      CACHE_SIZE: ${CACHE_SIZE:-10000}
      # Connection pool
      DGRAPH_POOL_SIZE: ${DGRAPH_POOL_SIZE:-10}
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Realtime Communication - Production settings
  realtime-communication:
    restart: always
    environment:
      RUST_LOG: ${RUST_LOG:-warn,realtime_communication=info}
      # Production limits
      MAX_CONNECTIONS: ${MAX_CONNECTIONS:-50000}
      MAX_ROOMS: ${MAX_ROOMS:-10000}
      MAX_MESSAGES_PER_SECOND: ${MAX_MESSAGES_PER_SECOND:-100}
      # Timeouts
      HEARTBEAT_INTERVAL: ${HEARTBEAT_INTERVAL:-30s}
      CLIENT_TIMEOUT: ${CLIENT_TIMEOUT:-300s}
      # Rate limiting
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60}
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis - Production settings
  redis:
    restart: always
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec

  # Nginx - Enable in production
  nginx:
    restart: always
    profiles:
      - production
    environment:
      # SSL settings
      SSL_CERT_PATH: ${SSL_CERT_PATH:-/etc/nginx/ssl/cert.pem}
      SSL_KEY_PATH: ${SSL_KEY_PATH:-/etc/nginx/ssl/key.pem}
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Prometheus - Production retention
  prometheus:
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana - Production settings
  grafana:
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_USERS_ALLOW_ORG_CREATE: 'false'
      GF_AUTH_DISABLE_LOGIN_FORM: 'false'
      GF_AUTH_DISABLE_SIGNOUT_MENU: 'false'
      # Production settings
      GF_SERVER_ENABLE_GZIP: 'true'
      GF_ANALYTICS_REPORTING_ENABLED: 'false'
      GF_ANALYTICS_CHECK_FOR_UPDATES: 'false'
      GF_LOG_MODE: 'console'
      GF_LOG_LEVEL: 'warn'

  # Jaeger - Production settings
  jaeger:
    restart: always
    environment:
      SPAN_STORAGE_TYPE: badger
      BADGER_EPHEMERAL: 'false'
      BADGER_DIRECTORY_VALUE: /badger/data
      BADGER_DIRECTORY_KEY: /badger/key
      BADGER_SPAN_STORE_TTL: 72h
    volumes:
      - jaeger_data:/badger

volumes:
  jaeger_data:

# Production network settings
networks:
  ai-workflow-net:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450  # Optimize for cloud environments