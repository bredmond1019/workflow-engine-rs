version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-workflow-db
    environment:
      POSTGRES_USER: ${DB_USER:-aiworkflow}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-aiworkflow123}
      POSTGRES_DB: ${DB_NAME:-ai_workflow}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-aiworkflow}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-workflow-net

  # AI Workflow System (Rust)
  ai-workflow-system:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-workflow-system
    depends_on:
      postgres:
        condition: service_healthy
      jaeger:
        condition: service_started
    environment:
      DATABASE_URL: postgres://${DB_USER:-aiworkflow}:${DB_PASSWORD:-aiworkflow123}@postgres:5432/${DB_NAME:-ai_workflow}
      HOST: 0.0.0.0
      PORT: 8080
      RUST_LOG: ${RUST_LOG:-info}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-here}
      REGISTRY_ENDPOINT: http://localhost:8080
      # MCP Server URLs
      NOTION_MCP_URL: ${NOTION_MCP_URL:-ws://notion-mcp:3001}
      SLACK_MCP_URL: ${SLACK_MCP_URL:-ws://slack-mcp:3002}
      HELPSCOUT_MCP_URL: ${HELPSCOUT_MCP_URL:-ws://helpscout-mcp:3003}
      # Monitoring
      JAEGER_ENDPOINT: ${JAEGER_ENDPOINT:-http://jaeger:14268/api/traces}
    ports:
      - "${API_PORT:-8080}:8080"
    volumes:
      - ./workflows:/app/workflows:ro
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-workflow-net

  # Notion MCP Server
  notion-mcp:
    build:
      context: ./mcp-servers/notion-server
      dockerfile: Dockerfile
    container_name: notion-mcp
    environment:
      NOTION_API_KEY: ${NOTION_API_KEY:-your-notion-api-key}
      MCP_PORT: 3001
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${NOTION_MCP_PORT:-3001}:3001"
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:3001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-workflow-net

  # Slack MCP Server
  slack-mcp:
    build:
      context: ./mcp-servers/slack-server
      dockerfile: Dockerfile
    container_name: slack-mcp
    environment:
      SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN:-your-slack-bot-token}
      SLACK_APP_TOKEN: ${SLACK_APP_TOKEN:-your-slack-app-token}
      MCP_PORT: 3002
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${SLACK_MCP_PORT:-3002}:3002"
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:3002/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-workflow-net

  # HelpScout MCP Server
  helpscout-mcp:
    build:
      context: ./mcp-servers/helpscout-server
      dockerfile: Dockerfile
    container_name: helpscout-mcp
    environment:
      HELPSCOUT_API_KEY: ${HELPSCOUT_API_KEY:-your-helpscout-api-key}
      MCP_PORT: 3003
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${HELPSCOUT_MCP_PORT:-3003}:3003"
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:3003/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-workflow-net

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-workflow-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - ai-workflow-net

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ai-workflow-grafana
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: 'false'
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - ai-workflow-net

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ai-workflow-jaeger
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"  # Jaeger UI
      - "${JAEGER_COLLECTOR_PORT:-14268}:14268"  # Collector HTTP
      - "${JAEGER_QUERY_PORT:-16687}:16687"  # Query Service
      - "9411:9411"  # Zipkin compatible endpoint
    networks:
      - ai-workflow-net

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: ai-workflow-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-workflow-net

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: ai-workflow-nginx
    depends_on:
      - ai-workflow-system
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    networks:
      - ai-workflow-net
    profiles:
      - production

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  redis_data:

networks:
  ai-workflow-net:
    driver: bridge